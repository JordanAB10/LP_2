#include<bits/stdc++.h>
using namespace std;

void selection_sort(vector<int> v, int n){
    for(int i=0; i<n; i++){
        int max_value = INT_MAX;
        int index;
        for(int j=i+1; j<n; j++){
            if(v[j] < max_value){
                max_value = v[j];
                index = j;
            }
        }
        if(v[i] > v[index]){
            int temp = v[i];
            v[i] = v[index];
            v[index] = temp;
        }
    }

    // Printing the sorted Array
    cout<<"The Sorted Array is: ";
    for(int i=0; i<n; i++){
        cout<<v[i]<<" ";
    }
}



int main(){
    cout<<"------------ Selection Sort ------------"<<endl;
    int n;
    cout<<"Enter the total number of elements: ";
    cin>>n;

    vector<int> v(n);
    for(int i=0; i<n; i++){
        cout<<"Enter the "<<i+1<<"th element: ";
        cin>>v[i];
    }

    selection_sort(v,n);
    return 0;
}


#include <bits/stdc++.h>
using namespace std;
// 1. Selection sort
void s_sort(vector<int> v, int n) {
  for (int i = 0; i < n; i++) {
    int maxi = INT_MAX;
    int index;
    for (int j = i + 1; j < n; j++) {
      if (v[j] < maxi) {
        maxi = v[j];
        index = j;
      }
    }
    if (v[i] > v[index]) {
      int temp = v[i];
      v[i] = v[index];
      v[index] = temp;
    }
  }
  cout << "sorted array is: ";
  for (int i = 0; i < n; i++)
    cout << v[i] << " ";
  cout << "\n";
}

// 2. Dijkstra algo.

vector<vector<int>> graph;

void addEdge(int x, int y, int cost) {
  graph[x][y] = cost;
  graph[y][x] = cost;
}

int minDist(int dist[], bool sett[], int V) {
  int min = INT_MAX, min_index;

  for (int v = 0; v < V; v++)
    if (sett[v] == false && dist[v] <= min)
      min = dist[v], min_index = v;

  return min_index;
}

void dijkstra(int src, int V) {
  int dist[V];

  bool sett[V];
  for (int i = 0; i < V; i++)
    dist[i] = INT_MAX, sett[i] = false;

  dist[src] = 0;
  for (int count = 0; count < V - 1; count++) {
    int u = minDist(dist, sett, V);
    sett[u] = true;

    for (int v = 0; v < V; v++)
      if (!sett[v] && graph[u][v] && dist[u] != INT_MAX &&
          dist[u] + graph[u][v] < dist[v])
        dist[v] = dist[u] + graph[u][v];
  }




  
  cout << "from 0 : " << endl;
  for (int i = 0; i < V; i++)
    cout << i << "is at distance: " << dist[i] << endl;
}
int main() {
  cout << "1. Selection sort\n2. Dijkstra algo.\n";
  int choice;
  cin >> choice;
  if (choice == 1) {
    int n;
    cout << "enter total elements: ";
    cin >> n;

    vector<int> v(n);

    for (int i = 0; i < n; i++) {
      cin >> v[i];
    }
    s_sort(v, n);
  } else {
    // number of vertices
    cout << "total vertices: ";
    int v;
    cin >> v;

    // number of edges
    cout << "total edges: ";
    int e;
    cin >> e;
    int x, y, z;
    graph = vector<vector<int>>(v, vector<int>(v, 0));
    for (int i = 0; i < e; i++) {
      cout << "start and ending vertex and cost of " << i + 1 << "th edge\n";
      cin >> x >> y >> z;
      addEdge(x, y, z);
    }

    dijkstra(0, v);
  }
}
